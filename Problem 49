2. Add Two Numbers

You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

CODE : -

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {

        ListNode temp1 = l1;
        ListNode temp2 = l2;

        ListNode l3 = new ListNode(0);
        ListNode temp3 = l3;
        int sum = 0;
        int carry = 0;

        while(temp1!=null && temp2!=null){
            sum = temp1.val + temp2.val + carry;
            carry = sum/10;
            
            if(sum>=10){
                
                temp3.next = new ListNode(sum % 10);
                temp3 = temp3.next;
            }
            else{
                temp3.next = new ListNode(sum);
                temp3 = temp3.next;
            }

            temp1 = temp1.next;
            temp2 = temp2.next;
            
        }

        while(temp1!= null || temp2!= null){
            if(temp1 == null){
                sum = temp2.val + carry;
                temp2 = temp2.next;
            }
            else{
                sum = temp1.val + carry;
                temp1 = temp1.next;
            }

            carry = sum/10;
            temp3.next = new ListNode(sum%10);
            temp3 = temp3.next;
        }
        if(carry>0){
            temp3.next = new ListNode(carry);
        }


        temp3 = l3;
        return temp3.next;

        
    }
}

 
