GFG Problem : -
Factorials of large numbers

Given an integer n, find its factorial. Return a list of integers denoting the digits that make up the factorial of n.

Examples:

Input: n = 5
Output: [1, 2, 0]
Explanation: 5! = 1*2*3*4*5 = 120

Input: n = 10
Output: [3, 6, 2, 8, 8, 0, 0]
Explanation: 10! = 1*2*3*4*5*6*7*8*9*10 = 3628800

Input: n = 1
Output: [1]
Explanation: 1! = 1 

CODE : -

// User function Template for Java

import java.util.ArrayList;
import java.util.Collections;

class Solution {
    public static ArrayList<Integer> factorial(int n) {
        // code here
        ArrayList<Integer> nums = new ArrayList<>();
        
        nums.add(1);
        
        // int size = 1;
        
        
        for(int multiplier = 2; multiplier<=n; multiplier++){
            
            multiply(multiplier, nums);
            
        }
        Collections.reverse(nums);

        return nums;
        
        
    }
    
    public static void multiply(int multiplier, ArrayList<Integer> nums){
            
        int carry = 0;
        for(int i = 0;i<nums.size(); i++){
            
            int result = nums.get(i)*multiplier + carry;
        
            // if(result< 10){
            //     nums.set(size, result)
            // }
            // else{
            //     carry = result%10;
            //     size++;
            //     nums.add(carry);
            // }
            
            nums.set(i, result % 10);
            carry = result / 10; 
        }
        
        while (carry != 0) {
            nums.add(carry % 10);
            carry = carry / 10;
        }
    }
}
